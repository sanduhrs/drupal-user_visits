<?php

/**
 * User visits
 * 
 * @author
 * Stefan Auditor <stefan.auditor@erdfisch.de>
 */

/**
 * Implementation of hook_help();
 */
function user_visits_help($path, $arg) {
  switch ($path) {
    case "admin/help#user-visits":
      return t("<p>Counts the visits to a user's profile.</p>");
      break;
  }
}

/**
 * Implementation of hook_menu();
 */
function user_visits_menu() {
  $items['admin/people/user_visits'] = array(
    'title' => 'User visits',
    'description' => "Configure where to display a user's visitors.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_visits_settings'),
    'access arguments' => array('administer user visits'),
    'file' => 'user_visits.admin.inc',
  );
  
  return $items;
}

/**
 * Implements hook_block_info().
 */
function user_visits_block_info() {
  $blocks[0] = array(
    'info' => t('Latest visitors'),
  );
  $blocks[1] = array(
    'info' => t('My latest visitors'),
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function user_visits_block_configure($delta = 0) {
  $form['items'] = array(
    '#type' => 'select',
    '#title' => t('Number of items'),
    '#default_value' => variable_get('user_visits_block_items_'. $delta, 5),
    '#options' => drupal_map_assoc(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25)),
  );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function user_visits_block_save($delta = 0, $edit = array()) {
  variable_set('user_visits_block_items_'. $delta, $edit['items']);
}

/**
 * Implements hook_block_view().
 */
function user_visits_block_view($delta = 0) {
  $limit = variable_get('user_visits_block_items_'. $delta, 5);
  switch ($delta) {
    case 0:
      $block = array(
        'subject' => t('Latest visitors'),
        'content' => user_visits_display_block_1(NULL, $limit),
      );
      break;
    case 1:
      global $user;
      $block = array(
        'subject' => t('My latest visitors'),
        'content' => user_visits_display_block_1($user->uid, $limit),
      );
      break;
  }
  return $block;
}

/**
 * Get latest visitors for block content
 */
function user_visits_display_block_1($uid = NULL, $limit = 5) {
  if (!$uid && (arg(0) == 'user' && is_numeric(arg(1)))) {
    $uid = arg(1);
  }
  if ($uid) {
    $visitors = user_visits_latest($uid, $limit);
    if (is_array($visitors)) {
      foreach ($visitors as $visitor) {
        $account = user_load(array('uid' => $visitor->vuid));
        $output .= theme('user_visits', array('account' => $account, 'timestamp' => $visitor->visit));
      }
    }
    $output .= theme('user_visits_total', array('total' => user_visits_total($uid)));
  }
  return $output;
}

/**
 * Implements hook_permission();
 */
function user_visits_permission() {
  return array(
    'administer user visits' => array(
      'title' => t('Administer user visits'),
    ),
  );
}

/**
 * Implements hook_user_view();
 */
function user_visits_user_view($account, $view_mode, $langcode) {
  // Display visitors on the user's profile.
  if (variable_get('user_visits_display', 0)) {
    $visitors = user_visits_latest($account->uid);
    if (is_array($visitors)) {
      foreach ($visitors as $visitor) {
        $user_account = user_load($visitor->vuid);
        $output .= theme('user_visits', array('account' => $user_account, 'timestamp' => $visitor->visit, 'referer' => $visitor->referer));
      }
    }
    
    $account->content['summary']['user_visits'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Latest visitors'),
      '#markup' => isset($output) ? $output : t('No visits by now'),
      '#weight' => 10,
      '#attributes' => array('class' => 'user-visits'),
    );
  }
}

/**
 * Implements hook_user_delete();
 */
function user_visits_user_delete(&$edit, &$account, $category = NULL) {
  db_delete('user_visits')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Update counter
 */
function user_visits_count($vuid, $uid) {
  db_delete('user_visits')
    ->condition('uid', $uid)
    ->condition('vuid', $vuid)
    ->execute();
  
  $item = array();
  $item['uid'] = $uid;
  $item['vuid'] = $vuid;
  $item['visit'] = REQUEST_TIME;
  $item['referer'] = $_SERVER['HTTP_REFERER'];

  return drupal_write_record('user_visits', $item);
}

/**
 * Get the total of visits
 */
function user_visits_total($uid) {
  return db_query("SELECT COUNT(visit) AS count FROM {user_visits} WHERE uid = :uid", array(':uid' => $uid))->fetchField();
}

/**
 * Get the latest visits
 */
function user_visits_latest($uid, $limit = 5) {
  $result = db_query_range("SELECT * FROM {user_visits} WHERE uid = :uid ORDER BY visit DESC", 0, $limit, array(':uid' => $uid));

  $visitors = array();
  foreach ($result as $visitor) {
    $visitors[] = $visitor;
  }
  return $visitors;
}

/**
 * Check if user should be counted
 */
function user_visit_is_hidden($user) {
  $intersect = array_intersect_key($user->roles, variable_get('user_visits_hidden_roles', array()));
  return count($intersect) ? TRUE : FALSE;
}

/**
 * Implementation of hook_exit().
 */
function user_visits_exit() {
  global $user;
  $referer = $_SERVER['HTTP_REFERER'];
  $i = 0;

  //Don't count anonymous-clicks
  if (!$user->uid) {
    return;
  }

  //Don't count if role is hidden
  if (user_visit_is_hidden($user)) {
    return;
  }
  //Try not to count clicks from the user's other profile pages
  if (strpos($_SERVER['HTTP_REFERER'], arg(0) .'/'. arg(1))) {
    return;
  }

  // Record visits on profile nodes
  if ($node = menu_get_object()) {
    if ((module_exists('nodeprofile') && is_nodeprofile($node->type)) OR (module_exists('usernode') && $nody->type == USERNODE_CONTENT_TYPE)) {
      //Don't count self-clicks
      if ($user->uid != $node->uid) {
        //Count view
        user_visits_count($user->uid, $node->uid);
      }
    }
  }
  // Record visits on user profile pages
  else if (arg(0) == 'user' && is_numeric(arg(1)) && !arg(2)) {
    //Don't count self-clicks
    if ($user->uid != arg(1)) {
      //Count view
      user_visits_count($user->uid, arg(1));
    }
  }
  // Record visits on custom paths
  else {
    $path = variable_get('user_visits_path', '');
    if (strlen($path) && arg(0)) {
      $chunks = explode('/', $path);
      foreach ($chunks as $chunk) {
        if (arg($i) == $chunk OR $chunk == '%') {
          if (is_numeric(arg($i)) AND !arg($i+1)) {
            //Don't count self-clicks
            if ($user->uid != arg($i)) {
              //Count view
              user_visits_count($user->uid, arg($i));
            }
          }
          $i++;
        }
        else {
          break;
        }
      }
    }
  }
}

/**
 * Implementation of hook_theme().
 */
function user_visits_theme($existing, $type, $theme, $path) {
  return array(
    'user_visits' => array(
      'variables' => array(
        'account'   => NULL,
        'timestamp' => NULL,
        'referer'   => NULL,
      ),
    ),
    'user_visits_total' => array(
      'variables' => array(
        'total'   => NULL,
      ),
    ),
  );
}

/**
 * Themeable function
 */
function theme_user_visits($vars) {
  $account = $vars['account'];
  $timestamp = $vars['timestamp'];
  $referer = $vars['referer'];

  $output  = '<div>'."\n";
  $output .= theme('user_picture', array('account' => $account));
  $output .= ' <div class="name">'. theme('username', array('account' => $account)) .'</div>'."\n";
  if ($timestamp) {
    $output .= $timestamp ? ' <div class="visit">'. t('!time ago', array('!time' => format_interval(time() - $timestamp))) .'</div>'."\n" : '';
    $output .= $referer ? ' <div class="referer">'. t('Referer !link', array('!link' => l($referer, $referer))) .'</div>'."\n" : '';
  }
  $output .= '</div>'."\n";
  return $output;
}

/**
 * Themeable function
 */
function theme_user_visits_total($vars) {
  $total = $vars['total'];

  $output = '<div class="user_visits_total">'. t('Total visits %total', array('%total' => $total)) .'</div>';
  return $output;
}
